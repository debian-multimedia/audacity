Description: Bug 367 (P2) - fix crash when sliding tracks vertically using sync
 lock. This patch contains the commits 11110, 11114, and 11116.
Origin: upstream, http://code.google.com/p/audacity/source/detail?r=11110

--- a/src/TrackPanel.cpp
+++ b/src/TrackPanel.cpp
@@ -7564,6 +7564,28 @@
       return false;
 
    if (clip2) {
+      // linking can cause pairs of mono tracks to get here.
+      // allow this case (both these won't have links)
+      if ((!src2 && !dst2) && (dst2 || src2))
+         return false;
+   
+      if (!src2) {
+         // if we are copying two mono linked tracks we have to ask for it differently
+         src2 = (WaveTrack*)mTracks->GetNext(src, false);
+         if (src2 && src2->GetKind() != Track::Wave)
+            src2 = NULL;
+      }
+      if (!dst2) {
+         dst2 = (WaveTrack*)mTracks->GetNext(dst, false);
+         if (dst2 && dst2->GetKind() != Track::Wave)
+            dst2 = NULL;
+      }
+      
+      // we should have a source and dest track
+      if (!dst2 || !src2)
+         return false;
+
+
       if (!dst2->CanInsertClip(clip2))
          return false;
    }
@@ -7572,13 +7594,20 @@
    if (src2)
       src2->MoveClipToTrack(clip2, dst2);
 
+   // If sync-lock is on then one of the mCapturedClipArray indexes may be a labeltrack.
+   // This means that we are not really copying a stereo track and cannot assume dst2 exists.
+   // If we found a src2 is the best indicator of whether or not it is stereo.
+   // This assumes that the first captured tracks will be WaveTracks - I believe this is the case
+   // from whats generated in StartSlide()
    if (mCapturedClipArray.GetCount() == 2) {
       if (mCapturedClipArray[0].clip == clip) {
          mCapturedClipArray[0].track = dst;
-         mCapturedClipArray[1].track = dst2;
+         if (src2)
+            mCapturedClipArray[1].track = dst2;
       }
       else {
-         mCapturedClipArray[0].track = dst2;
+         if (src2)
+            mCapturedClipArray[0].track = dst2;
          mCapturedClipArray[1].track = dst;
       }
    }
--- a/src/Track.cpp
+++ b/src/Track.cpp
@@ -831,6 +831,7 @@
    return NULL;
 }
 
+/// Return a track in the list that comes after Track t
 Track *TrackList::GetNext(Track * t, bool linked) const
 {
    if (t) {
--- a/src/Track.h
+++ b/src/Track.h
@@ -354,6 +354,11 @@
    Track *GetLink(Track * t) const;
 
    Track *GetPrev(Track * t, bool linked = false) const;
+   
+   /** Return a track in the list that comes after Track t
+     * @param t a track in the list
+     * @param linked if true, skips over linked tracks, if false returns the next track even if it is a linked track
+    **/
    Track *GetNext(Track * t, bool linked = false) const;
    int GetGroupHeight(Track * t) const;
 
