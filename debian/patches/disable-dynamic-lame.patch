Description: Add support to disable dynamic loading of LAME.
Author: Benjamin Drung <bdrung@debian.org>

--- /dev/null
+++ b/m4/audacity_checklib_lame.m4
@@ -0,0 +1,41 @@
+dnl Todo: Add Audacity / LAME license
+dnl
+dnl Please increment the serial number below whenever you alter this macro
+dnl for the benefit of automatic macro update systems
+# audacity_checklib_lame.m4 serial 1
+
+dnl Check for a copy of lame, whoose headers we will use for the importer
+AC_DEFUN([AUDACITY_CHECKLIB_LAME], [
+   AC_ARG_WITH(lame,
+               [AS_HELP_STRING([--with-lame],
+                               [use lame for import and export support])],
+               LAME_ARGUMENT=$withval,
+               LAME_ARGUMENT="unspecified")
+
+   dnl See if LAME is installed in the system
+
+   AC_CHECK_LIB(mp3lame,
+                lame_set_VBR_q,
+                lib_found="yes",
+                lib_found="no")
+
+   AC_CHECK_HEADER(lame/lame.h,
+                   header_found="yes",
+                   header_found="no")
+
+   if test "x$lib_found" = "xyes" && test "x$header_found" = "xyes" ; then
+      LAME_SYSTEM_AVAILABLE="yes"
+      AC_MSG_NOTICE([LAME library is available as system library.])
+      if test "x$dynamic_loading" = "xno"; then
+         LAME_SYSTEM_LIBS="-lmp3lame"
+         LAME_SYSTEM_CPPSYMBOLS="DISABLE_DYNAMIC_LOADING_LAME"
+      fi
+   else
+      LAME_SYSTEM_AVAILABLE="no"
+      AC_MSG_NOTICE([LAME library is NOT available as system library.])
+   fi
+
+   dnl see if LAME is available in the source dir
+
+   LAME_LOCAL_AVAILABLE="yes"
+])
--- a/configure.in
+++ b/configure.in
@@ -311,7 +311,7 @@
 dnl-------------------------------------------------------------
 dnl LIBRARIES="LIBVORBIS LIBMAD LIBSNDFILE LIBFLAC LIBID3TAG LIBSAMPLERATE LIBRESAMPLE LIBSBSMS LIBSOUNDTOUCH LIBNYQUIST LIBVAMP LIBEXPAT LIBTWOLAME FFMPEG LIBLRDF SLV2 REDLAND PORTSMF TAGLIB"
 dnl disable plugin categorisation and LV2 libs for 1.3.7 release
-LIBRARIES="LIBVORBIS LIBMAD LIBSNDFILE LIBFLAC LIBID3TAG LIBSAMPLERATE LIBRESAMPLE LIBSBSMS LIBSOUNDTOUCH LIBNYQUIST LIBVAMP LIBEXPAT LIBTWOLAME FFMPEG PORTSMF PORTAUDIO"
+LIBRARIES="LIBVORBIS LIBMAD LIBSNDFILE LIBFLAC LIBID3TAG LIBSAMPLERATE LIBRESAMPLE LIBSBSMS LIBSOUNDTOUCH LIBNYQUIST LIBVAMP LIBEXPAT LIBTWOLAME FFMPEG PORTSMF PORTAUDIO LAME"
 
 AC_MSG_NOTICE([Determining what libraries are available in this tree and on the system])
 
@@ -335,6 +335,7 @@
 AUDACITY_CHECKLIB_PORTSMF
 dnl AUDACITY_CHECKLIB_TAGLIB
 AUDACITY_CHECKLIB_PORTAUDIO
+AUDACITY_CHECKLIB_LAME
 
 dnl Decide what libraries to build with, and whether to use system or local libraries
 dnl Set variables based on choices.
--- a/src/configtemplate.h
+++ b/src/configtemplate.h
@@ -87,6 +87,9 @@
 /* Use system FFmpeg library and disable dynamic loading of it. */
 #undef DISABLE_DYNAMIC_LOADING_FFMPEG
 
+/* Use system LAME library and disable dynamic loading of it. */
+#undef DISABLE_DYNAMIC_LOADING_LAME
+
 /* Define if LADSPA plug-ins are enabled */
 #undef USE_LADSPA
 
--- a/src/export/ExportMP3.cpp
+++ b/src/export/ExportMP3.cpp
@@ -90,7 +90,11 @@
 
 #include "Export.h"
 
+#if defined(DISABLE_DYNAMIC_LOADING_LAME)
+#include <lame/lame.h>
+#else
 #include "lame.h"
+#endif
 
 #ifdef USE_LIBID3TAG 
 #include <id3tag.h>
@@ -561,6 +565,8 @@
 {
 public:
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
+
    FindDialog(wxWindow *parent, wxString path, wxString name, wxString type)
    :  wxDialog(parent, wxID_ANY, wxString(_("Locate Lame")))
    {
@@ -653,28 +659,36 @@
       return mLibPath.GetFullPath();
    }
 
+#endif // DISABLE_DYNAMIC_LOADING_LAME
+
 private:
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    wxFileName mLibPath;
 
    wxString mPath;
    wxString mName;
    wxString mType;
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    wxTextCtrl *mPathText;
 
    DECLARE_EVENT_TABLE()
 };
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
 BEGIN_EVENT_TABLE(FindDialog, wxDialog)
    EVT_BUTTON(ID_BROWSE, FindDialog::OnBrowse)
    EVT_BUTTON(ID_DLOAD,  FindDialog::OnDownload)
 END_EVENT_TABLE()
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
 //----------------------------------------------------------------------------
 // MP3Exporter
 //----------------------------------------------------------------------------
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
+
 typedef lame_global_flags *lame_init_t(void);
 typedef int lame_init_params_t(lame_global_flags*);
 typedef const char* get_lame_version_t(void);
@@ -718,6 +732,8 @@
 typedef size_t lame_get_lametag_frame_t(const lame_global_flags *, unsigned char* buffer, size_t size);
 typedef void lame_mp3_tags_fid_t(lame_global_flags *, FILE *);
 
+#endif // DISABLE_DYNAMIC_LOADING_LAME
+
 #if defined(__WXMSW__)
 // An alternative solution to give Windows an additional chance of writing the tag before
 // falling bato to lame_mp3_tag_fid().  The latter can have DLL sharing issues when mixing
@@ -770,9 +786,11 @@
    MP3Exporter();
    virtual ~MP3Exporter();
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    bool FindLibrary(wxWindow *parent);
    bool LoadLibrary(wxWindow *parent, AskUser askuser);
    bool ValidLibraryLoaded();
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    /* These global settings keep state over the life of the object */
    void SetMode(int mode);
@@ -814,9 +832,11 @@
 
 private:
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    wxString mLibPath;
    wxDynamicLibrary lame_lib;
    bool mLibraryLoaded;
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
 #if defined(__WXMSW__)
    wxString mBladeVersion;
@@ -829,6 +849,7 @@
    int mRoutine;
    int mChannel;
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    /* function pointers to the symbols we get from the library */
    lame_init_t* lame_init;
    lame_init_params_t* lame_init_params;
@@ -858,6 +879,7 @@
    beWriteInfoTag_t *beWriteInfoTag;
    beVersion_t *beVersion;
 #endif
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    lame_global_flags *mGF;
 
@@ -874,13 +896,17 @@
 
 MP3Exporter::MP3Exporter()
 {
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    mLibraryLoaded = false;
+#endif // DISABLE_DYNAMIC_LOADING_LAME
    mEncoding = false;
    mGF = NULL;
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    if (gPrefs) {
       mLibPath = gPrefs->Read(wxT("/MP3/MP3LibPath"), wxT(""));
    }
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    mBitrate = 128;
    mQuality = QUALITY_2;
@@ -894,6 +920,8 @@
    FreeLibrary();
 }
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
+
 bool MP3Exporter::FindLibrary(wxWindow *parent)
 {
    wxString path;
@@ -992,6 +1020,8 @@
    return mLibraryLoaded;
 }
 
+#endif // DISABLE_DYNAMIC_LOADING_LAME
+
 void MP3Exporter::SetMode(int mode)
 {
    mMode = mode;
@@ -1017,6 +1047,7 @@
 {
    wxLogMessage(wxT("Loading LAME from %s"), libpath.c_str());
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    if (!lame_lib.Load(libpath, wxDL_LAZY)) {
       wxLogMessage(wxT("load failed"));
       return false;
@@ -1120,6 +1151,7 @@
       lame_lib.Unload();
       return false;
    }
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    mGF = lame_init();
    if (mGF == NULL) {
@@ -1136,25 +1168,31 @@
       mGF = NULL;
    }
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    lame_lib.Unload();
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    return;
 }
 
 wxString MP3Exporter::GetLibraryVersion()
 {
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    if (!mLibraryLoaded) {
       return wxT("");
    }
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    return wxString::Format(wxT("LAME %hs"), get_lame_version());
 }
 
 int MP3Exporter::InitializeStream(int channels, int sampleRate)
 {
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    if (!mLibraryLoaded) {
       return -1;
    }
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    if (channels > 2) {
       return -1;
@@ -1165,7 +1203,10 @@
    lame_set_in_samplerate(mGF, sampleRate);
    lame_set_out_samplerate(mGF, sampleRate);
    lame_set_disable_reservoir(mGF, false);
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
+// TODO: Make this configurable (detect the existance of this function)
    lame_set_padding_type(mGF, PAD_NO);
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    // Add the VbrTag for all types.  For ABR/VBR, a Xing tag will be created.
    // For CBR, it will be a Lame Info tag.
@@ -1310,9 +1351,13 @@
 
    int result = lame_encode_flush(mGF, outbuffer, mOutBufferSize);
 
+#if defined(DISABLE_DYNAMIC_LOADING_LAME)
+   mInfoTagLen = lame_get_lametag_frame(mGF, mInfoTagBuf, sizeof(mInfoTagBuf));
+#else
    if (lame_get_lametag_frame) {
       mInfoTagLen = lame_get_lametag_frame(mGF, mInfoTagBuf, sizeof(mInfoTagBuf));
    }
+#endif
 
    return result;
 }
@@ -1565,10 +1610,20 @@
                        int subformat)
 {
    int rate = lrint(project->GetRate());
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    wxWindow *parent = project;
+#endif // DISABLE_DYNAMIC_LOADING_LAME
    TrackList *tracks = project->GetTracks();
    MP3Exporter exporter;
 
+#ifdef DISABLE_DYNAMIC_LOADING_LAME
+   if (!exporter.InitLibrary(wxT(""))) {
+      wxMessageBox(_("Could not initialize MP3 encoding library!"));
+      gPrefs->Write(wxT("/MP3/MP3LibPath"), wxString(wxT("")));
+
+      return false;
+   }
+#else
    if (!exporter.LoadLibrary(parent, MP3Exporter::Maybe)) {
       wxMessageBox(_("Could not open MP3 encoding library!"));
       gPrefs->Write(wxT("/MP3/MP3LibPath"), wxString(wxT("")));
@@ -1582,7 +1637,8 @@
       
       return false;
    }
-   
+#endif // DISABLE_DYNAMIC_LOADING_LAME
+
    // Retrieve preferences
    int highrate = 48000;
    int lowrate = 8000;
@@ -2012,13 +2068,17 @@
    MP3Exporter exporter;
    wxString versionString = _("MP3 export library not found");
 
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    if (prompt) {
       exporter.FindLibrary(parent);
    }
 
    if (exporter.LoadLibrary(parent, prompt ? MP3Exporter::Yes : MP3Exporter::No)) {
+#endif // DISABLE_DYNAMIC_LOADING_LAME
       versionString = exporter.GetLibraryVersion();
+#ifndef DISABLE_DYNAMIC_LOADING_LAME
    }
+#endif // DISABLE_DYNAMIC_LOADING_LAME
 
    return versionString;
 }
--- a/src/prefs/LibraryPrefs.cpp
+++ b/src/prefs/LibraryPrefs.cpp
@@ -89,13 +89,17 @@
          S.AddVariableText(_("MP3 Library:"),
                            true,
                            wxALL | wxALIGN_RIGHT | wxALIGN_CENTRE_VERTICAL);
-         S.Id(ID_MP3_FIND_BUTTON).AddButton(_("&Locate..."),
+         wxButton *locate_button = S.Id(ID_MP3_FIND_BUTTON).AddButton(_("&Locate..."),
                                             wxALL | wxALIGN_LEFT | wxALIGN_CENTRE_VERTICAL);
          S.AddVariableText(_("LAME MP3 Library:"),
                            true,
                            wxALL | wxALIGN_RIGHT | wxALIGN_CENTRE_VERTICAL);
-         S.Id(ID_MP3_DOWN_BUTTON).AddButton(_("&Download"),
+         wxButton *download_button = S.Id(ID_MP3_DOWN_BUTTON).AddButton(_("&Download"),
                                             wxALL | wxALIGN_LEFT | wxALIGN_CENTRE_VERTICAL);
+#ifdef DISABLE_DYNAMIC_LOADING_LAME
+         locate_button->Enable(FALSE);
+         download_button->Enable(FALSE);
+#endif // DISABLE_DYNAMIC_LOADING_LAME
       }
       S.EndTwoColumn();
    }
--- a/src/prefs/PrefsDialog.cpp
+++ b/src/prefs/PrefsDialog.cpp
@@ -101,7 +101,9 @@
          w = new ImportExportPrefs(mCategories);mCategories->AddPage(w, w->GetName(), false, 0);
          w = new ExtImportPrefs(mCategories);   mCategories->AddPage(w, w->GetName(), false, 0);
          w = new ProjectsPrefs(mCategories);    mCategories->AddPage(w, w->GetName(), false, 0);
+#if !defined(DISABLE_DYNAMIC_LOADING_FFMPEG) || !defined(DISABLE_DYNAMIC_LOADING_LAME)
          w = new LibraryPrefs(mCategories);     mCategories->AddPage(w, w->GetName(), false, 0);
+#endif
          w = new SpectrumPrefs(mCategories);    mCategories->AddPage(w, w->GetName(), false, 0);
          w = new DirectoriesPrefs(mCategories); mCategories->AddPage(w, w->GetName(), false, 0);
          w = new WarningsPrefs(mCategories);    mCategories->AddPage(w, w->GetName(), false, 0);
